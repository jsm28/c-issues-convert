<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">

<html>
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 1st December 2004), see www.w3.org">

  <title>Defect report #335</title>
</head>

<body>
  <h2 align="center">Defect Report #335</h2><a href=
  "dr_334.htm">Previous Defect Report</a> &lt; - &gt; <a href=
  "dr_336.htm">Next Defect Report</a>

  <p><br>
  <b>Submitter:</b> Fred Tydeman (USA)<br>
  <b>Submission Date:</b> 2006-12-12<br>
  <b>Source:</b> WG 14<br>
  <b>Reference Document:</b>&nbsp;<a href=
  "http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1204.htm">ISO/IEC
  WG14 N1204</a>,&nbsp; <a href=
  "http://www.open-std.org/jtc1/sc22/wg14/www/docs/dr_262.htm">ISO/IEC
  WG14 DR 262</a>,&nbsp; <a href=
  "http://www.open-std.org/jtc1/sc22/wg14/www/docs/dr_315.htm">ISO/IEC
  WG14 DR 315</a><br>
  <b>Version:</b> 1.3<br>
  <b>Date:</b> 2008-07-21<br>
  <b>Subject:</b>_Bool bit-fields</p>

  <p><b>Summary</b></p>

  <p>What are the constraints on and semantics of _Bool
  bit-fields?</p>
  <pre>
  #include &lt;stdbool.h&gt;
  struct bits {
      _Bool    bbf1 : 1;        /* unsigned 1-bit _Bool bit-field */
      _Bool    bbf3 : 3;        /* unsigned 3-bit _Bool bit-field */
  } bits;
  int main(void){
    bits.bbf1 = true;              /* the value 1u */
    bits.bbf1 = ~ bits.bbf1;       /* undefined? 0u? 1u? */
    bits.bbf3 = true;              /* the value 1u */
    bits.bbf3 = ~ bits.bbf3;       /* undefined? 0u? 1u? 6u? */
    return 0;
  }
</pre>

  <p>What is the maximum width of a _Bool bit-field allowed that
  does not cause a constraint violation? 1? CHAR_BIT? Something
  else? Is bbf3 a constraint violation?</p>

  <p>DR 262 changed 6.7.2.1#3 to require a constraint violation if
  a bit-field width is too large.</p>

  <p>6.2.5#2 says _Bool can hold the values 0 and 1.</p>

  <p>6.2.6.2#6 discusses width.</p>

  <p>I see nothing that says the width of a _Bool is 1.</p>

  <p>6.7.2.1#9 has: If the value 0 or 1 is stored into a
  nonzero-width bit-field of type _Bool, the value of the bit-field
  shall compare equal to the value stored.</p>

  <p>So, if a value other than 0 or 1 is stored into a
  nonzero-width bit-field of type _Bool, is that undefined?</p>

  <p>The first assignment gives the bit-field the value 1u. The ~
  of that value yields ...1111110u. When that value is then stored
  into the _Bool bit-field, what value is stored?</p>

  <ul>
    <li>0u since it is a 1-bit unsigned int field.</li>

    <li>1u since it is a _Bool (and the value is non-zero).</li>

    <li>6u since it is a 3-bit unsigned int field.</li>

    <li>Undefined.</li>
  </ul>

  <p>6.3.1.2 Boolean type has: When any scalar value is converted
  to _Bool, the result is 0 if the value compares equal to 0;
  otherwise, the result is 1.</p>

  <p>6.7.2.1#9 has: A bit-field is interpreted as a signed or
  unsigned integer type consisting of the specified number of
  bits.</p>

  <p>So, does a _Bool bit-field have the semantics of a _Bool (as
  per 6.3.1.2) or of an unsigned integer type (as per 6.7.2.1)? DR
  315 might be relevant.</p>

  <p><b>Suggested Technical Corrigendum</b></p>
  <hr>

  <p><b>Proposed Technical Corrigendum</b><br></p>

  <p><b>Committee Discussion</b> (for history only)</p>

  <h4>Spring 2007</h4>

  <p>The width of a <code><b>_Bool</b></code> bit-field is at most
  the implementation defined width of the type
  <code><b>_Bool</b></code>. A <code><b>_Bool</b></code> bit-field
  has the semantics of a <code><b>_Bool</b></code> (and not an
  <code><b>unsigned int</b></code>).</p>

  <h4>Spring 2008</h4>
<p>6.7.2.1 paragraph 3 covers the above Committee discussion. (9899:1999 + TC1 + TC 2 + TC3)
<blockquote>The expression that specifies the width of a bit-field 
shall be an integer constant expression with a nonnegative value that 
does not exceed the width of an object of the type that would be specified
were the colon and expression omitted.</blockquote>
<p>Therefore the width of a <code><b>_Bool</b></code> bit-field is at most the 
implementation-defined width of the type <code><b>_Bool</b></code>.</p>
  
  <p><b>Committee Response</b></p>
  
  <p>6.2.5 paragraph 6 states that

  <blockquote>
    The type <code><b>_Bool</b></code> and the unsigned integer
    types that correspond to the standard signed integer types are
    the standard unsigned integer types.
  </blockquote>In other words, <code><b>_Bool</b></code> is one of
  the unsigned integer types whether it is used in a bit-field or
  not. 6.3.1.2p1 explicitly defines the semantics of
  <code><b>_Bool</b></code>, which are different from other
  unsigned integer types.

  <p>A <code><b>_Bool</b></code> bit-field has the semantics of a
  <code><b>_Bool</b></code> (and not <code><b>unsigned
  int</b></code>).</p>
  
<p>6.7.2.1 paragraph 3 (9899:1999 + TC1 + TC 2 + TC3) states that

<blockquote>The expression that specifies the width of a bit-field 
shall be an integer constant expression with a nonnegative value that 
does not exceed the width of an object of the type that would be specified
were the colon and expression omitted.</blockquote>
<p>The width of a <code><b>_Bool</b></code> bit-field is at most the 
implementation-defined width of the type <code><b>_Bool</b></code>.</p>

  <p><br>
  <a href="dr_334.htm">Previous Defect Report</a> &lt; - &gt;
  <a href="dr_336.htm">Next Defect Report</a></p>
</body>
</html>
