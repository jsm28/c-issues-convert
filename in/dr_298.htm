<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">

<html>
  <head>
    <meta name="generator" content=
    "HTML Tidy for Windows (vers 1st August 2002), see www.w3.org">

    <title>Defect report #298</title>
  </head>

  <body>
    <h2 align="center">Defect Report #298</h2>
    <a href="dr_297.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_299.htm">Next Defect Report</a> 

    <p><br>
     <b>Submitter:</b> J. Stephen Adamczyk<br>
     <b>Submission Date:</b> 2004-03-31<br>
     <b>Source:</b> Convener<br>
     <b>Reference Document:</b> <a href=
    "http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1046.txt">N1046</a><br>

     <b>Version:</b> 1.4<br>
     <b>Date:</b> 2007-09-06<br>
     <b>Subject:</b> Validity of constant in <tt><b>unsigned long
    long</b></tt> range</p>

    <p><b>Summary</b></p>

    <p>Consider a constant 9223372036854775808 in a C99
    implementation that has 64-bit two's complement <tt><b>long
    long</b></tt>, and no extended integer types.</p>

    <p>6.4.4.1 says that an unsuffixed decimal constant has the
    first of the types on the following list into which its value
    will fit: <tt><b>int</b></tt>, <tt><b>long int</b></tt>,
    <tt><b>long long int</b></tt>. In this case, the value does not
    fit into any of those types, and there are no extended integer
    types to try. (The value would fit into unsigned long long, but
    that's not on the list.)</p>

    <p>So I conclude that this constant is invalid, just as a
    grossly too-large constant (say, one consisting of a 1 followed
    by 1,000 zeroes) would be invalid. (And I think that's a good
    thing, because otherwise this constant could be unsigned on
    some implementations and signed on others that have larger
    extended integer types.)</p>

    <p>However, I'm not sure 6.4.4.1 (or 6.4.4) says anything that
    requires an error, or even gives meaning to this constant. It
    doesn't say what happens if the constant doesn't fit in any
    type on its list and there are no extended integer types.</p>

    <p>Is this a defect, or was this intentionally worded vaguely
    to allow latitude to implementations?</p>

    <p>A related issue comes up with
    <tt><b>UINT64_C(9223372036854775808)</b></tt>. One plausible
    implementation for the macro <tt><b>UINT64_C</b></tt> would
    seem to be to cast the constant to the proper type. However,
    that does not work in this particular case, because the
    constant before casting is the same invalid constant discussed
    above. Another plausible implementation (and suggested by
    7.18.4.1p2) is to concatenate a suffix to the constant, e.g., a
    "U" in this case. Sounds good, but 7.18.4p2 doesn't say that
    the argument to the macro must be an unsuffixed constant;
    indeed it says that the syntax must match 6.4.4.1, which
    implies that a suffix is allowed.</p>

    <p>So if 9223372036854775808 is an invalid constant, it seems
    that an implementation must rely on compiler magic to get
    <tt><b>UINT64_C</b></tt> right; the tricks available with
    standard macros don't work.</p>

    <p><b>Suggested Technical Corrigendum</b><br>
    </p>
    <hr>

    <p><b>Committee Discussion</b></p>

    <p>The Committee believes that the Constraint in 6.4.4 applies,
    and that a constant must have a type. If a type cannot be
    assigned, the program is invalid and violates the
    Constraint.</p>

    <p>The second part involves <tt><b>uint64_c</b></tt>. The
    macros were not intended to be very smart. It is permissible
    for them to use compiler magic.</p>

    <p><b>Technical Corrigendum</b></p>

    <p>Change the constraint in 6.4.4 to read:</p>

    <blockquote>
      Each constant shall have a type and the value of a constant
      shall be in the range of representable values for its type.
    </blockquote>
    Add the following sentence as last sentence of the paragraph
    after the list in 6.4.4.1: 

    <blockquote>
      If an integer constant cannot be represented by any type in
      its list and has no extended integer type, then the integer
      constant has no type.
    </blockquote>

    <p>7.18.4, paragraph 2 - change</p>

    <blockquote>
      "a decimal, octal, or hexadecimal constant"
    </blockquote>
    to 

    <blockquote>
      "an unsuffixed integer constant".
    </blockquote>
    <br>
     <br>
     

    <p><br>
     <a href="dr_297.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_299.htm">Next Defect Report</a></p>
  </body>
</html>

