<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">

<html>
  <head>
    <meta name="generator" content=
    "HTML Tidy for Windows (vers 1st August 2002), see www.w3.org">

    <title>Defect report #287</title>
  </head>

  <body>
    <h2 align="center">Defect Report #287</h2>
    <a href="dr_286.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_288.htm">Next Defect Report</a> 

    <p><br>
     <b>Submitter:</b> Fred Tydeman (USA)<br>
     <b>Submission Date:</b> 2003-04-13<br>
     <b>Source:</b> WG 14<br>
     <b>Reference Document:</b> <a href=
    "http://www.open-std.org/JTC1/SC22/WG14/www/docs/dr_087.html">ISO/IEC
    WG14 C90 DR 087</a><br>
     <b>Version:</b> 1.3<br>
     <b>Date:</b> 2006-03-29<br>
     <b>Subject:</b> Floating-point status flags and sequence
    points</p>

    <p><b>Summary</b></p>

    <p>The problem is, 6.5 Expressions (which existed in C90) was
    not updated when the floating-point status flags were added to
    C99. Also, the response to C90 DR 087 was not incorporated into
    C99.</p>

    <p>Consider the expression: <tt><b>a = x*y + w*z;</b></tt>
    where all variables are of type <tt><b>double</b></tt> and each
    of the sub-expressions <tt><b>x*y</b></tt> and
    <tt><b>w*z</b></tt> raises the floating-point overflow
    exception, which sets the floating-point overflow status flag
    as a side-effect. The model used by C99 (5.1.2.3 Program
    execution, in particular, paragraph 2 and footnote 11; as well
    as, 7.6 Floating-point environment &lt;fenv.h&gt;, in
    particular, paragraph 1; 7.6.2 Floating-point exceptions; and
    F.7.1 Environment management) and IEC 60599 / IEEE-754 is that
    the status flags are sticky and may be set multiple times as
    side effects of floating-point operations between sequence
    points. Setting the same floating-point status flag multiple
    times is well defined: it is set.</p>

    <p>Consider the expression: <tt><b>b =
    (feclearexcept)(FE_OVERFLOW) +
    (feraiseexcept)(FE_OVERFLOW);</b></tt> which both clears and
    sets the same floating-point status flag between two sequence
    points by the use of functions (not macros). If the execution
    of the two functions is allowed to overlap, then this is
    undefined behaviour (as the same object is being modified to
    two different values at the "same" time (between the same pair
    of sequence points)). If functions are atomic (not allowed to
    overlap execution), then, each function evaluation is
    considered a sequence point, and the two modifies are not
    between the same two sequence points. That means, there is no
    undefined behaviour, but it is unspecified as to which of the
    two function calls is done first/last. I understand that draft
    C89 had words similar to "Function calls are allowed to
    overlap.", but that they were removed before C89 became a
    standard, and that only those who know that bit of history know
    that C99 does not allow functions to overlap execution. C90
    Defect Report 087 had as part of its response "function calls
    do not overlap", but those words are not in C99.</p>

    <p>The same problem exists for <tt><b>ERRNO</b></tt>. Consider
    the expression: <tt><b>b = (log)(-1.0) +
    (exp)(DBL_MAX);</b></tt> in which <b><tt>log</tt></b> sets
    <b><tt>errno</tt></b> to <b><tt>EDOM</tt></b>, while
    <b><tt>exp</tt></b> sets <b><tt>errno</tt></b> to
    <b><tt>ERANGE</tt></b>.</p>

    <p>Modifying the same status flag twice between two sequence
    points is a direct contradiction of 6.5 Expressions, paragraph
    2: "Between the previous and next sequence point an object
    shall have its stored value modified at most once by the
    evaluation of an expression." C99 needs to allow for multiple
    updates to the same floating-point status flag.</p>

    <p><b>Suggested Technical Corrigendum</b></p>

    <p>Add to 6.5 Expressions, paragraph 2, after the first
    sentance: An exception to this shall be permitted if the object
    is a floating-point status flag and the modification sets the
    flag.</p>

    <p>Add to 6.5 Expressions, paragraph 3, after the last
    sentance: Function calls, in the same expression-statement, do
    not overlap. Another possible place to add this could be
    6.5.2.2 Function calls, paragraph 10. Possible wording issue:
    recursive function calls.</p>
    <hr>

    <p><b>Committee Discussion</b></p>
    Flags are not objects, thus the constraint on modifying objects
    doesn't apply to flags. 

    <p><b>Committee Response</b></p>
    As noted in the response to <a href=
    "http://www.open-std.org/jtc1/sc22/WG14/www/docs/dr_087.htm">DR
    087</a>, function calls in the same expression do not overlap.
    This has not changed for C99. 

    <p><b>Technical Corrigendum</b></p>
    Add a footnote to 6.5 Expressions, paragraph 2, after the first
    sentence. 

    <blockquote>
      <sup>*</sup>A floating-point status flag is not an object and
      can be set more than once within an expression.
    </blockquote>
    Add a footnote to 7.6 Floating-point environment, paragraph 1,
    after the third sentence. 

    <blockquote>
      <sup>*</sup>A floating-point status flag is not an object and
      can be set more than once within an expression.
    </blockquote>

    <p><br>
     <a href="dr_286.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_288.htm">Next Defect Report</a></p>
  </body>
</html>

