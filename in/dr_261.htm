<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
  <head>
    <meta name="generator" content=
    "HTML Tidy for Windows (vers 1st August 2002), see www.w3.org">

    <title>Defect report #261</title>
  </head>

  <body bgcolor="#FFFFFF">
    <h2 align="center">Defect Report #261</h2>
    <a href="dr_260.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_262.htm">Next Defect Report</a> 

    <p><br>
     <b>Submitter:</b> UK C Panel<br>
     <b>Submission Date:</b> 2001-09-07<br>
     <b>Source:</b> Clive D.W. Feather &lt;clive@demon.net&gt;<br>
     <b>Version:</b> 1.2<br>
     <b>Date:</b> 2003-10-06<br>
     <b>Subject:</b> constant expressions</p>
    <b>Problem</b> 

    <p>When is an expression a constant expression ?</p>

    <p>Consider the code (at block scope):</p>
<pre>
<tt><b> enum e1 { ex1 = INT_MAX + 1 };        //</b> <i>Line E1</i> <b> enum e2 { ex2 = INT_MAX + (0, 1) };   //</b> <i>Line E2</i> <b> char *p1 = (1 - 1);                   //</b> <i>Line P1</i> <b> char *p2 = (42, 1 - 1);               //</b> <i>Line P2</i> <b> short s1 = 42 + (0, 1);               //</b> <i>Line S1</i> <b> p1 = (42, 1 - 1);                     //</b> <i>Line X1</i> <b> s1 = (42, 69);                        //</b> <i>Line X2</i> <b> p2 = 0;                               //</b> <i>Line X3</i> <b> p2 = 1 - 1;                           //</b> <i>Line X4</i> 
</tt>
</pre>

    <p>On line E1 the syntax says that <tt><b>INT_MAX + 1</b></tt>
    is a constant-expr. Therefore this is a constant expression,
    the requirements of 6.6 apply, and line E2 violates the
    constraint in 6.6#3.</p>

    <p>On the remaining lines the syntax says that the code
    following the = sign is an assignment-expr; at no point in the
    parse does a constant-expr occur. So are these constant
    expressions ?</p>

    <p>For line P1 to be legitimate, the expression <tt><b>(1 -
    1)</b></tt> must be an integer constant expression (6.3.2.3#3).
    This implies that any expression comprised entirely of
    constants is an integer constant expression. So line P2
    violates the constraint in 6.6#3 and, rather more worryingly,
    so does line S1.</p>

    <p>If a generic initializer can be a constant expression, then,
    surely, so can any other expression. This means that lines X1
    and X2 violate the constraint in 6.6#3. On the other hand, if
    they are not constant expressions, then the right hand sides on
    lines X3 and X4 do not include a null pointer constant; nor
    does line P1.</p>

    <p>Consider also:</p>
<pre>
<tt><b>static int v = sizeof (int [(2, 2)]);
</b></tt>
</pre>

    <p>This is legitimate if, and only if, <tt><b>(2, 2)</b></tt>
    is a constant expression.</p>

    <p>It would appear that the term "constant expression" actually
    has four subtly different meanings.</p>

    <ol>
      <li>An object in the syntax. Where the syntax tree contains
      constant-expr the resulting code must meet the constraints
      and semantics of 6.6. An example is 6.7.2.2, where explicit
      values for enumeration constants must be constant-exprs.</li>

      <li>A requirement on the program that a given construct must,
      in context, be a constant expression even though in other
      contexts the expression need not be constant. An example is
      6.7.8#4: if the object has static storage duration, the
      initializer is subject to the constraints and semantics of
      6.6, but if it has automatic storage duration there is no
      such requirement.</li>

      <li>A requirement on the implementation that an entity must
      be a constant expression. For example, this applies to macros
      in standard headers. The implementation is not conforming if
      the definition does not meet the syntax, constraints, and
      semantic requirements of 6.6.</li>

      <li>A test that distinguishes two cases. An example is
      6.3.2.3#3, where a certain subset of integer expressions
      (those that are constant-exprs and have a value of 0) are
      also null pointer constants. It is not clear whether
      expressions that break the constraints or semantic
      requirements are erroneous or are simply not constant
      expressions.</li>
    </ol>

    <p>The Standard needs to make clear when each of these four
    cases applies.</p>

    <p>On further examination, cases (1) and (2) appear to always
    be obvious from the text of the Standard. Case (3) appears only
    to apply to macros defined in standard headers or predefined.
    Case (4) is harder to identify, but I believe that there are
    only two situations:</p>

    <blockquote>
      - null pointer constants;<br>
       - determining whether a type is variably modified.
    </blockquote>

    <p><b>Suggested Technical Corrigendum</b></p>

    <p>Replace 6.6#2 with the following:</p>

    <blockquote>
      [#2] A constant expression is one which is evaluated during
      translation rather than runtime, usually because the precise
      value will affect the translation in some way. 

      <p>[#2a] Where the implementation is required to provide a
      constant expression, that expression shall be one that, if
      included in the appropriate context, would meet the
      requirements of this subclause and whose evaluation would not
      involve undefined behaviour.</p>

      <p>[#2b] An expression has a <i>translation-time value</i> if
      it meets the requirements of this subclause and evaluation
      would not involve undefined behaviour. If the expression
      fails to meet these requirements (for example, an integer
      expression includes a comma operator or a cast to a floating
      type), the expression does not have a translation-time value
      but nevertheless is not necessarily invalid.</p>
    </blockquote>
    Change 6.3.2.3#3 to begin: 

    <blockquote>
      [#3] An integer expression with the translation-time value 0,
      or such an expression cast to type
      <tt><b>void&nbsp;*</b></tt>, is called a <i>null pointer
      constant</i>.55)
    </blockquote>
    Change 6.7.5.2#1 to read, in part: 

    <blockquote>
      [...] an integer type. If the expression has a
      translation-time value, it shall be greater than zero. The
      element type [...]
    </blockquote>
    the last part of #4 to read: 

    <blockquote>
      If the size is an integer expression with a translation-time
      value and the element type has a known constant size, the
      array type is not a variable length array type; otherwise,
      the array type is a variable length array type.
    </blockquote>
    #5 to begin: 

    <blockquote>
      [#5] If the size is an expression that does not have a
      translation-time value: if it occurs [...]
    </blockquote>
    #6 to begin: 

    <blockquote>
      [#6] For two array types to be compatible, both shall have
      compatible element types, and if both size specifiers are
      present and have translation-time values, then both size
      specifiers shall have the same value.
    </blockquote>
    and add a new example: 

    <blockquote>
      [#11] EXAMPLE 5: an expression that contains only constants
      but breaks one or more of the rules of 6.6 does not have a
      translation-time value. Therefore, in: 
<pre>
<tt><b>     int fla [5];       //</b> <i>not a VLA, "5" has a translation-time value</i> <b>     int vla [(0, 5)];  //</b> <i>VLA, 6.6 forbids comma operators</i> 
</tt>
</pre>
      This can be used to force an array to have a constant size
      but still be variably modified.
    </blockquote>
    <hr>

    <p><b>Committee Discussion</b> (for history only)<br>
     The semantics and grammar overlap.<br>
     The grammar says "this is an expression".<br>
     The semantics says "this is a constant expression"</p>

    <p><b>Committee Response</b></p>

    <blockquote>
      <p>The Committee agrees with your analysis of "constant
      expression" and the division into four categories.</p>

      <p>We agree that line P1 is legitimate because "(1-1)" is a
      constant expression. Lines P2 and S1 do not include constant
      expressions because:</p>

      <ul>
        <li>they contain a comma operator (forbidden by 6.6#3)</li>

        <li>there is a valid interpretation of the code that uses a
        non-constant expression.</li>
      </ul>
      Line S1 is legitimate, while line P2 violates the constraints
      of 6.5.16.1#3 (the right hand side must either have pointer
      to character or pointer to void type, or must be a null
      pointer constant). Line X1 violates the same constraint for
      the same reason (this was also addressed in DR 064).<br>
      <br>
       

      <p>Line X2 is legitimate because there is no requirement for
      the right hand side to be a constant expression. Lines X3 and
      X4 are legitimate because the expressions are constant
      expressions with value <tt><b>0</b></tt> and therefore null
      pointer constants.</p>

      <p>The Committee also agrees that:</p>
<pre>
    <tt><b>int fla [(0+5)];     //</b> <i>is a normal array, not variably modified</i></tt>
    <tt><b>int vla [(0,5)];     //</b> <i>is a variable length array</i></tt>
</pre>
      <br>
       

      <p>In general, the interpretation of an expression for
      constantness is context sensitive. For any expression which
      contains only constants:</p>

      <ul>
        <li>If the syntax or context only permits a constant
        expression, the constraints of 6.6#3 and 6.6#4 shall
        apply.</li>

        <li>Otherwise, if the expression meets the requirements of
        6.6 (including any form accepted in accordance with
        6.6#10), it is a constant expression.</li>

        <li>Otherwise it is not a constant expression.</li>
      </ul>
      <br>
       

      <p>In summary, provided the above points are taken account
      of, the Committee does not believe the Standard is ambiguous
      nor that it is necessary to modify it to make this
      clearer.</p>
    </blockquote>

    <p><br>
     <a href="dr_260.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_262.htm">Next Defect Report</a></p>
  </body>
</html>

