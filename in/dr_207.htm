<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">

<html>
  <head>
    <meta name="generator" content=
    "HTML Tidy for Windows (vers 1st August 2002), see www.w3.org">

    <title>Defect report #207</title>
  </head>

  <body>
    <h2 align="center">Defect Report #207</h2>
    <a href="dr_206.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_208.htm">Next Defect Report</a> 

    <p><br>
     <b>Submitter:</b> Clive Feather (UK)<br>
     <b>Submission Date:</b> 1999-06-27<br>
     <b>Source:</b><br>
     <b>Reference Document:</b> <a href=
    "http://www.open-std.org/JTC1/SC22/WG14/www/docs/n892.htm">ISO/IEC
    WG14 N892</a><br>
     <b>Version:</b> 1.2<br>
     <b>Date:</b> 2001-09-18 02:48:44<br>
     <b>Subject:</b> Handling of imaginary types</p>

    <p><b>Summary</b><br>
     The handling of imaginary types in the Standard is somewhat
    inconsistent. For example, they are not mentioned at all in
    6.2.5 (other than a footnote), but are treated as first-class
    types in 6.7.2. Annex G makes certain assumptions about such
    types but these assumptions are not supported by the
    Standard.</p>

    <p><b>Details</b><br>
     There are two reasonable approaches that could be followed.
    The first is to remove all mention of imaginary types from the
    main text of the Standard and put them all in Annex G. The
    second is to make the basic properties of imaginary types part
    of the main language (while still making them optional),
    leaving Annex G to handle the details of ISO 60559 imaginary
    types.</p>

    <p>After some thought, the author of this DR feels that
    imaginary types are experimental enough that the first approach
    is better and has worded the Suggested Technical Corrigendum on
    that basis.</p>

    <p>The keyword <tt><b>_Imaginary</b></tt> is mentioned in
    6.4.1, 6.7.2, and 7.3.1. These references - and any related
    text - are all to be removed and replacement wording added to
    Annex G.</p>

    <p>A new subclause G.4.4 is added. This specifies the practical
    implications of giving imaginary types the same representation
    and alignment as real floating types.</p>

    <p><b>Suggested Technical Corrigendum</b><br>
     Delete "_Imaginary" from the list of keywords in 6.4.1. If
    this is felt to be too radical, instead add the following text
    to paragraph 2:</p>

    <blockquote>
      The keyword <tt><b>_Imaginary</b></tt> is not used in the C
      language, but is reserved for specifying imaginary types such
      as described in Annex G.
    </blockquote>

    <p>Delete "<tt><b>_Imaginary</b></tt>" from 6.7.2p1 and the
    three imaginary cases from 6.7.2p2.</p>

    <p>Change 6.7.2p3 to read:</p>

    <blockquote>
      The type specifier <tt><b>_Complex</b></tt> shall not be used
      if the implementation does not provide complex types.
    </blockquote>

    <p>Delete 7.3.1p3.</p>

    <p>Delete "<tt><b>imaginary</b></tt>" from 7.3.1p5.</p>

    <p>Replace 7.3.1p4 with:</p>

    <blockquote>
      The macro <tt><b>I</b></tt> expands to
      <tt><b>_Complex_I</b></tt>.
    </blockquote>

    <p>Add a new paragraph before G.2p1:</p>

    <blockquote>
      There is a new keyword <tt><b>_Imaginary</b></tt> used to
      specify imaginary types. It is used as a type-specifier
      within declaration-specifiers in the same way as
      <tt><b>_Complex</b></tt> is (thus "<tt><b>_Imaginary
      float</b></tt>" is a valid type name).
    </blockquote>

    <p>Add a new subclause G.4.4</p>

    <blockquote>
      <b>G.4.4 Interchangeable values</b> 

      <p>Though imaginary types are not compatible with the
      corresponding real type, values of one may be used where the
      other is expected in the following cases. In each case the
      value is converted to the value of the other type that has
      the same representation (that is, by multiplying by the
      imaginary unit when converting to an imaginary type, and by
      dividing by the imaginary unit when converting to a real
      type).</p>

      <ul>
        <li>one type is the type of the parameter, and the other
        type the type of the argument, when a function is called
        without a prototype in scope; [*]</li>

        <li>one type is the type of an argument corresponding to a
        trailing ellipsis in a function call and the other is
        specified as the type argument of an invocation of the
        <tt><b>va_arg</b></tt> macro;</li>

        <li>one type is the type of an argument to a function such
        as <tt><b>fprintf</b></tt> or the type pointed to by an
        argument to a function such as <tt><b>fscanf</b></tt>, and
        the other is the type implied by the corresponding
        conversion specifier.</li>
      </ul>
      [*] If a prototype is in scope, conversion is as if by
      assignment and the value will be converted to zero.
    </blockquote>

    <p>Replace G.6p1 with:</p>

    <blockquote>
      The macros 

      <blockquote>
        <tt><b>imaginary</b></tt>
      </blockquote>
      and 

      <blockquote>
        <tt><b>_Imaginary_I</b></tt>
      </blockquote>
      are defined, respectively, as <tt><b>_Imaginary</b></tt> and
      a constant expression of type <tt><b>const float
      _Imaginary</b></tt> with the value of the imaginary unit. The
      macro <tt><b>I</b></tt> is defined to be
      <tt><b>_Imaginary_I</b></tt> (not <tt><b>_Complex_I</b></tt>
      as stated in 7.3). Notwithstanding the provisions of 7.1.3, a
      program may undefine and then perhaps redefine the macro
      imaginary.
    </blockquote>

    <p><b>Afternote</b><br>
     If WG14 wishes to take the alternative approach of moving
    <tt><b>_Imaginary</b></tt> types more firmly into the body of
    the Standard, then the following areas would be affected.</p>

    <ul>
      <li>Do not make any of the above changes.</li>

      <li>Add text to 4p6 explaining that imaginary types are never
      required.</li>

      <li>Merge the text from G.2 into 6.2.5.</li>

      <li>Merge the existing text from G.4 into 6.3.1.</li>

      <li>Make the cases described in the new G.4.4 above further
      cases of the relevant subclauses (6.5.2.2, 7.15.1.1,
      7.19.6.1, 7.19.6.2, 7.24.2.1, and 7.24.2.2).</li>

      <li>Move G.5.1p1 and G.5.2p1 into 6.5.5 and 6.5.6.</li>

      <li>Delete G.6p1.</li>
    </ul>
    <hr>

    <p><b>Technical Corrigendum:</b><br>
     In 6.4.1 append to paragraph 2:</p>

    <blockquote>
      The keyword <tt><b>_Imaginary</b></tt> is reserved for
      specifying imaginary types.<small><sup>footnote</sup></small>
    </blockquote>

    <blockquote>
      <small><sup>footnote</sup></small>One possible specification
      for imaginary types is Annex G.
    </blockquote>
    <br>
     In 6.7.2 delete "<tt><b>_Imaginary</b></tt>" from paragraph 1,
    delete the cases: 

    <ul>
      <li><tt><b>float _Imaginary</b></tt></li>

      <li><tt><b>double _Imaginary</b></tt></li>

      <li><tt><b>long double _Imaginary</b></tt></li>
    </ul>
    from paragraph 2, and change paragraph 3 to read: 

    <blockquote>
      [#3] The type specifier <tt><b>_Complex</b></tt> shall not be
      used if the implementation does not provide complex
      types.<small><sup>101</sup></small>
    </blockquote>
    Change footnote 101 to read: 

    <blockquote>
      <small><sup>101</sup></small>Freestanding implementations are
      not required to provide complex types.
    </blockquote>

    <p>In 7.3.1 replace paragraphs 3 to 5 with:</p>

    <blockquote>
      [#3] The macro 

      <blockquote>
        <tt><b>I</b></tt>
      </blockquote>
      expands to
      <tt><b>_Complex_I</b></tt>.<small><sup>162</sup></small>
    </blockquote>

    <blockquote>
      [#4] Notwithstanding the provisions of subclause 7.1.3, a
      program may undefine and perhaps then redefine the macros
      <tt><b>complex</b></tt> and <tt><b>I</b></tt>.
    </blockquote>

    <p>Add a new paragraph to the start of G.2:</p>

    <blockquote>
      [#0] There is a new keyword <tt><b>_Imaginary</b></tt>, which
      is used to specify imaginary types. It is used as a
      type-specifier within declaration-specifiers in the same way
      as <tt><b>_Complex</b></tt> is (thus "<tt><b>_Imaginary
      float</b></tt>" is a valid type name).
    </blockquote>

    <p>Replace G.6 paragraph 1 with:</p>

    <blockquote>
      [#1] The macro 

      <blockquote>
        <tt><b>imaginary</b></tt>
      </blockquote>
      and 

      <blockquote>
        <tt><b>_Imaginary_I</b></tt>
      </blockquote>
      are defined, respectively, as <tt><b>_Imaginary</b></tt> and
      a constant expression of type <tt><b>const float
      _Imaginary</b></tt> with the value of the imaginary unit. The
      macro 

      <blockquote>
        <tt><b>I</b></tt>
      </blockquote>
      is defined to be <tt><b>_Imaginary_I</b></tt> (not
      <tt><b>_Complex_I</b></tt> as stated in 7.3). Notwithstanding
      the provisions of 7.1.3, a program may undefine and then
      perhaps redefine the macro <tt><b>imaginary</b></tt>.
    </blockquote>

    <p><br>
     <a href="dr_206.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_208.htm">Next Defect Report</a></p>
  </body>
</html>

