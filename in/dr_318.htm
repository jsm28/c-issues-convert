<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">

<html>
  <head>
    <meta name="generator" content=
    "HTML Tidy for Windows (vers 1st August 2002), see www.w3.org">

    <title>Defect report #318</title>
  </head>

  <body>
    <h2 align="center">Defect Report #318</h2>
    <a href="dr_317.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_319.htm">First Defect Report</a> 

    <p><br>
     <b>Submitter:</b> Fred Tydeman (USA)<br>
     <b>Submission Date:</b> 2004-10-27<br>
     <b>Source:</b> WG 14<br>
     <b>Reference Document:</b> Version: 1.2<br>
     <b>Date:</b> 2006-03-05<br>
     <b>Subject:</b><b><tt>(double)0.1f</tt></b> with
    <b><tt>FLT_EVAL_METHOD</tt></b> being 2</p>

    <p><b>Summary</b></p>

    <p>When <b><tt>FLT_EVAL_METHOD</tt></b> is 2, the 0.1f is
    represented to the precision of <b><tt>long double</tt></b>,
    while the type remains as <b><tt>float</tt></b>. Then, when the
    cast to <b><tt>double</tt></b> is done, contradictory
    requirements are specified by the standard. One part of the
    standard requires that when a float is promoted to a double,
    the value is unchanged. While another part of the standard
    requires that extra precision be removed by the cast
    conversion.</p>

    <p><b>Details</b></p>

    <p>5.2.4.2.2 Characteristics of floating types &lt;float.h&gt;;
    Paragraph 7 [after DR 290]</p>

    <blockquote>
      Except for assignment and cast (which remove all extra range
      and precision), the values of operations with floating
      operands and values subject to the usual arithmetic
      conversions and of floating constants are evaluated to a
      format whose range and precision may be greater than required
      by the type. The use of evaluation formats is characterized
      by the implementation-defined value of
      <tt><b>FLT_EVAL_METHOD</b></tt>:<sup>19)</sup>
    </blockquote>

    <blockquote>
      <b>2</b> evaluate all operations and constants to the range
      and precision of <b><tt>long double</tt></b> type.
    </blockquote>

    <p>6.3.1.5 Real floating types; Paragraphs 1 and 2</p>

    <blockquote>
      When a <b><tt>float</tt></b> is promoted to
      <b><tt>double</tt></b> or <b><tt>long double</tt></b>, or a
      <b><tt>double</tt></b> is promoted to <b><tt>long
      double</tt></b>, its value is unchanged.
    </blockquote>

    <blockquote>
      When a <b><tt>double</tt></b> is demoted to
      <b><tt>float</tt></b>, a <b><tt>long double</tt></b> is
      demoted to <b><tt>double</tt></b> or <b><tt>float</tt></b>,
      or a value being represented in greater precision and range
      than required by its semantic type (see 6.3.1.8) is
      explicitly converted to its semantic type, if the value being
      converted can be represented exactly in the new type, it is
      unchanged. If the value being converted is in the range of
      values that can be represented but cannot be represented
      exactly, the result is either the nearest higher or nearest
      lower representable value, chosen in an
      implementation-defined manner. If the value being converted
      is outside the range of values that can be represented, the
      behavior is undefined.
    </blockquote>

    <p>6.3.1.8 Usual arithmetic conversions; Paragraph 2</p>

    <blockquote>
      The values of floating operands and of the results of
      floating expressions may be represented in greater precision
      and range than that required by the type; the types are not
      changed thereby. <sup>52)</sup>
    </blockquote>

    <blockquote>
      52) The cast and assignment operators are still required to
      perform their specified conversions as described in 6.3.1.4
      and 6.3.1.5.
    </blockquote>

    <p>6.5.4 Cast operators; Paragraph 4</p>

    <blockquote>
      ... A cast that specifies no conversion has no effect on the
      type or value of an expression. <sup>86)</sup>
    </blockquote>

    <blockquote>
      86) If the value of the expression is represented with
      greater precision or range than required by the type named by
      the cast (6.3.1.8), then the cast specifies a conversion even
      if the type of the expression is the same as the named type.
    </blockquote>

    <p><b>Suggested Technical Corrigendum</b></p>

    <p>Add to 6.3.1.5, the end of paragraph 1: "(if the source
    value is represented in the precision and range of its
    type)".</p>

    <p>Change in 6.3.1.5, paragraph 2, "explicitly converted to its
    semantic type" to "explicitly converted (including to its own
    type)".</p>

    <p>Move the text of footnote 86 to normative text in 6.5.4.</p>

    <p>An alternative (not liked by the author) is to add a
    footnote to 6.3.1.5 along the lines of: To force a
    floating-point value to have no more precision than a given
    type requires two casts to that type, e.g.,
    <b><tt>(double)(double)0.1f</tt></b> assuredly has no more
    precision than <b><tt>(double)</tt></b>. The rightmost cast
    changes the type, but not the representation, while the
    leftmost cast changes the representation (throws away any extra
    precision or range).</p>
    <hr>

    <p><b>Technical Corrigendum</b></p>

    <p>Add to 6.3.1.5, the end of paragraph 1:</p>

    <blockquote>
      "(if the source value is represented in the precision and
      range of its type)".
    </blockquote>

    <p>Change in 6.3.1.5, paragraph 2,</p>

    <blockquote>
      "explicitly converted to its semantic type" to "explicitly
      converted (including to its own type)".
    </blockquote>

    <p>Move the text of footnote 86 to normative text in 6.5.4.</p>

    <p><br>
     <a href="dr_317.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_319.htm">First Defect Report</a></p>
  </body>
</html>

