<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 13), see www.w3.org">

  <title>Defect report #340</title>
</head>

<body>
  <h2 align="center">Defect Report #340</h2><a href=
  "dr_339.htm">Previous Defect Report</a> &lt; - &gt; <a href=
  "dr_341.htm">Next Defect Report</a>

  <p><br>
  <b>Submitter:</b> Joseph Myers (UK)<br>
  <b>Submission Date:</b> 2007-03-24<br>
  <b>Source:</b> Joseph Myers &lt;joseph@codesourcery.com&gt;<br>
  <b>Reference Document:</b> <a href=
  "http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1221.htm">ISO/IEC
  WG14 N1221</a><br>
  <b>Version:</b> 1.3<br>
  <b>Date:</b> 2008-09-10<br>
  <b>Subject:</b> Composite types for variable-length arrays</p>

  <p><b>Summary</b></p>

  <p>The definition of composite types in 6.2.7#3 says "If one type
  is an array of known constant size, the composite type is an
  array of that size; otherwise, if one type is a variable length
  array, the composite type is that type." and also "These rules
  apply recursively to the types from which the two types are
  derived.". Which of these wins for variable length array types?
  Are the element types composed recursively, or is the element
  type of the variable length array type taken even though it may
  have less information than the other element type? (That loss of
  information in the composite type would mean some sequences of
  three or more declarations of the same function are constraint
  violations for some orderings of the declarations and undefined
  behavior for other orderings.)</p>

  <p>See reflector messages 11145-11147 for discussion.</p>

  <p><b>Suggested Technical Corrigendum</b><br>
  6.2.7 paragraph 3, change "is that type" to "is an array of that
  size; in either case, the element type of the composite type is
  the composite type of the two element types".</p>
  <hr>

  <p><b>Committee Discussion</b></p>

  <p>The element types are composed. Suggested TC is close, but not
  quite right. The example from 11145 should be included here.</p>

  <p>Also see <a href=
  "http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1238.htm">N1238</a>
  and WG14 e-mail SC22WG14.11145.</p>

  <h4>Fall 2007</h4>

  <p>No consensus was reached on the words from <a href=
  "http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1238.htm">N1238</a>.</p>

  <h4>Spring 2008</h4>It appears that the current implementations
  differ in this area. Some compilers works one way (as described),
  while others do not. Probably best solution is to make this
  undefined behavior.

  <p><b>Proposed Technical Corrigendum</b></p>In subclause 6.2.7,
  paragraph 3, change the first bullet to the following.

  <blockquote>
    &ndash; If both types are array types, the following rules are
    applied:

    <blockquote>
      If one type is an array of known constant size, the composite
      type is an array of that size.<br>
      Otherwise, if one type is a variable length array whose size
      is specified by an expression that is not evaluated, the
      behavior is undefined.<br>
      Otherwise, if one type is a variable length array whose size
      is specified, the composite type is a variable length array
      of that size.<br>
      Otherwise, if one type is a variable length array of
      unspecified size, the composite type is a variable length
      array of unspecified size.<br>
      Otherwise, both types are arrays of unknown size, and the
      composite type is an array of unknown size.<br>
      The element type of the composite type is the composite type
      of the two element types.
    </blockquote>In subclause J.2, paragraph 1, insert the
    following bullet in order.

    <blockquote>
      &ndash; A program requires the formation of a composite type
      from a variable length array type whose size is specified by
      an expression that is not evaluated (6.2.7).
    </blockquote>
  </blockquote>

  <p><a href="dr_339.htm">Previous Defect Report</a> &lt; - &gt;
  <a href="dr_341.htm">Next Defect Report</a></p>
</body>
</html>
