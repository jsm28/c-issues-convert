<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">

<html>
  <head>
    <meta name="generator" content=
    "HTML Tidy for Windows (vers 1st August 2002), see www.w3.org">

    <title>Defect report #288</title>
  </head>

  <body>
    <h2 align="center">Defect Report #288</h2>
    <a href="dr_287.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_289.htm">Next Defect Report</a> 

    <p><br>
     <b>Submitter:</b>Clive Feather<br>
     <b>Submission Date:</b> 2003-10-21<br>
     <b>Source:</b> BSI<br>
     <b>Reference Document:</b> <a href=
    "http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1012.txt">N1012</a><br>

     <b>Version:</b> 1.2<br>
     <b>Date:</b> 2004-09-28<br>
     <b>Subject:</b> deficiency on multibyte conversions</p>

    <p><b>Summary</b></p>

    <p>Consider a typical use of the multibyte conversion function
    <tt><b>mbrtowc</b></tt>:</p>
<pre>
    enum { FINISHED, ERROR } convert (void)
    {
        mbstate_t s = { 0 };
        char c;
        wchar_t wc;

        for (;;)
        {
            c = get_a_byte ();
            switch (mbrtowc (&amp;wc, &amp;c, 1, &amp;s))
            {
            case 1:          put_wide_char (wc);    break;
            case (size_t)-2: break;
            case 0:          put_wide_char (L'\0'); return FINISHED;
            case (size_t)-1: return ERROR;
            }
        }
    }
</pre>

    <p>The multibyte conversion functions were originally written
    on the assumption that wide characters are singletons. That is,
    while several multibyte characters may map to one wide
    character, and may map to different wide characters depending
    on the current state, each sequence maps to only one wide
    character. As a result, functions such as
    <tt><b>mbrtowc</b></tt> do not have the concept of returning
    more than one wide character; only a single one can be returned
    per call.</p>
    This is fine for mappings like: 
<pre>
    ISO 8859-1   -&gt;  UTF-16 or UTF-32 in Normalization Form C
    UTF-8        -&gt;  UTF-32 without change of normalization
</pre>
    but not for others. It is possible to play fast and loose with
    the meaning of <i>state</i> to relax the requirement a little
    bit - if a sequence of three bytes maps to two wide characters,
    the first call to <tt><b>mbrtowc</b></tt> can return
    <tt><b>2</b></tt> and the second call <tt><b>1</b></tt>, with
    the state object holding any necessary information. The
    requirement then becomes: N bytes can result in M wide
    characters, where N &gt;= M and where the first K wide
    characters depend only on the first N-M+K bytes. An example of
    such a mapping is UTF-8 -&gt; UTF-16 (shown in binary): 
<pre>
  0AAAAAAA                            -&gt; 000000000AAAAAAA
  110AAAAA 10BBBBBB                   -&gt; 00000AAAAABBBBBB
  1110AAAA 10BBBBBB 10CCCCCC          -&gt; AAAABBBBBBCCCCCC
  11110AAA 10BBCCCC 10DDEEEE 10FFFFFF -&gt; 110110XXXXCCCCDD
110111EEEEFFFFFF
</pre>
    In the last case the <tt><b>mbrtowc</b></tt> function can
    return <tt><b>-2</b></tt>, <tt><b>-2</b></tt>,
    <tt><b>1</b></tt>, and <tt><b>1</b></tt> in that order.
    However, consider a very similar encoding to UTF-16 where the
    two wide characters are in the opposite order. The first wide
    character (the one beginning 110111) cannot be output until all
    4 bytes have been seen, so the first three calls to mbrtowc
    must return <tt><b>-2</b></tt>. The fourth call can return the
    first wide character, but there is now no way to return the
    second one. If the next UTF-8 sequence is 2 or 3 bytes long, it
    would provide an opportunity, but if it is only 1 byte long or,
    even worse, was the zero character, it wouldn't. While the
    above is a hypothetical situation, a real conversion that has
    this problem is converting ISO 8859-1 (or many similar
    encodings) to Unicode in Normalization Form D. In NFD all
    accented characters are broken down into their components. So
    some example conversions are: 
<pre>
    0x20 -&gt; 0x0020
    0x61 -&gt; 0x0061
    0xBF -&gt; 0x00BF
    0xC0 -&gt; 0x0041 0x0300
    0xC1 -&gt; 0x0041 0x0301
    0xC4 -&gt; 0x0041 0x0308
    0xC8 -&gt; 0x0045 0x0300
    0xE6 -&gt; 0x00E6
    0xE7 -&gt; 0x0063 0x0327
</pre>
    What is needed is for mbrtowc to have a way to say "I have an
    unfinished wide character sequence, I do not need any more
    bytes for now". The obvious way to represent this would be a
    returned value of <tt><b>0</b></tt>. Unfortunately this has
    already been given a different meaning ("end of string
    reached") and changing it would be impractical. Therefore the
    following text proposes the return value <tt><b>-3</b></tt> for
    this case. This value would only be generated for locales where
    this was an issue, so it will not affect existing uses of the
    code. And applications that are not modified to handle this
    code but are presented with it are likely to treat it as an
    error. 

    <p>Of the other functions in 7.24.6, <tt><b>mbrlen</b></tt> has
    the same problem. The <tt><b>wcrtomb</b></tt> function also has
    to deal with this issue, but the wording already allows it to
    be state-ful and return <tt><b>0</b></tt> to indicate that
    nothing has been output at this stage. Neither the
    <tt><b>mbsrtowcs</b></tt> nor <tt><b>wcsrtombs</b></tt>
    functions have an issue (though with the former it is possible
    that the limit of len wide characters is reached in the middle
    of a multi-wide-character sequence; the rest of the sequence
    will be retained in the <tt><b>mbstate_t</b></tt> object until
    the next call).</p>

    <p><b>Suggested Technical Corrigendum</b></p>
    Append to 7.24.6.3.2#4: 

    <blockquote>
      <tt><b>(size_t)(-3)</b></tt> if the multibyte sequence
      converted by the previous call with the same
      <tt><b>mbstate_t</b></tt> object generated more than one wide
      character and not all these characters have yet been stored;
      the next wide character in the sequence has now been stored
      and no bytes from the input have been consumed by this call.
    </blockquote>
    In 7.24.6.3.1#3, add <tt><b>(size_t)(-3)</b></tt> to the
    possible returned values. <br>
     

    <p>Optional extra change for clarity:<br>
    </p>

    <p>In 7.24.6.3.3#4, EITHER add to the end of the first
    sentence:</p>

    <blockquote>
      ; this may be 0
    </blockquote>

    <p>OR add a footnote reference to that sentence:</p>

    <blockquote>
      291A If the wide character encoding requires two or more wide
      characters to be considered together when doing the
      conversion, the value returned can be 0.
    </blockquote>
    The Rationale could also be amended to address these issues. 
    <hr>
    <b>Committee Discussion</b> <br>
     

    <ul>
      <li>More time is needed to assess the impact on the char32
      work!</li>

      <li>Not really a <i>defect</i>, but a <i>deficiency</i>.</li>
    </ul>

    <p><b>Committee Response</b></p>
    This is not really a <i>defect</i>, but a <i>deficiency</i>
    which could be addressed in a future release of the C Standard.
    <br>
     <br>
     

    <p><br>
     <a href="dr_287.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_289.htm">Next Defect Report</a></p>
  </body>
</html>

