<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">

<html>
  <head>
    <meta name="generator" content=
    "HTML Tidy for Windows (vers 1st August 2002), see www.w3.org">

    <title>Defect report #313</title>
  </head>

  <body>
    <h2 align="center">Defect Report #313</h2>
    <a href="dr_312.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_314.htm">Next Defect Report</a> 

    <p><br>
     <b>Submitter:</b> UK C Panel<br>
     <b>Submission Date:</b> 2005-03-04<br>
     <b>Source:</b> Joseph Myers
    &lt;joseph@codesourcery.com&gt;<br>
     <b>Reference Document:</b> <a href=
    "http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1101.htm">ISO/IEC
    WG14 N1101</a><br>
     <b>Version:</b> 1.2<br>
     <b>Date:</b> 2006-03-05<br>
     <b>Subject:</b> Incomplete arrays of VLAs</p>

    <p><b>Summary</b></p>

    <p>If an incomplete array type has elements of unknown size,
    should the incomplete array type be a VLA type? The definition
    of VLA types in 6.7.5.2#4 only seems to make complete types
    into VLA types. In particular, does the following, at block
    scope, violate any constraint?</p>
<pre>
    int i;
    // ...
    int c[][i] = { 0 };
</pre>

    <p>If it is not a VLA - and nothing in the standard seems to
    make it a VLA - then the initializer would seem to be valid,
    and to determine the size of the array. This seems rather
    against the spirit of prohibiting initializing VLAs in
    6.5.2.5#1 (compound literals) and 6.7.8#3 (initializers).</p>

    <p>Those appear to be the only places where it particularly
    matters whether such types are VLA types. In other cases, use
    of such types does not depend on whether they are VLA types, or
    yields a constraint violation whether or not they are VLA
    types, or in the case of</p>
<pre>
    static int c[][i];
</pre>

    <p>at block scope violates the requirement of 6.7#7 for the
    type to be complete, so causing undefined behavior, though if
    the type were a VLA type then there would be a violation of the
    constraint in 6.7.5.2#2, so requiring a diagnostic.</p>

    <p>Defining such types to be VLA types would ensure constraint
    violations in 6.5.2.5#1 and 6.7.5.2#2. 6.7.8#3 would need
    rewording to avoid "that is not a variable length array type"
    applying to "object type" only.</p>

    <p><b>Suggested Technical Corrigendum</b><br>
    </p>
    <hr>

    <p><b>Committee Response</b></p>

    <p>Per 6.7.8, paragraph 17, The initializer initializes the sub
    object of the array <tt><b>c[ ]</b></tt>, which in this case is
    a VLA, therefore it violates the constraint in 6.7.8, paragraph
    3.</p>

    <p><br>
     <a href="dr_312.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_314.htm">Next Defect Report</a></p>
  </body>
</html>

