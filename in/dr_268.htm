<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
  <head>
    <meta name="generator" content=
    "HTML Tidy for Windows (vers 1st August 2002), see www.w3.org">

    <title>Defect report #268</title>
  </head>

  <body bgcolor="#FFFFFF">
    <h2 align="center">Defect Report #268</h2>
    <a href="dr_267.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_269.htm">Next Defect Report</a> 

    <p><br>
     <b>Submitter:</b> UK C Panel<br>
     <b>Submission Date:</b> 2001-09-07<br>
     <b>Source:</b> Clive D.W. Feather &lt;clive@demon.net&gt;<br>
     <b>Version:</b> 1.4 <!-- ! year-month-day hour:min:sec -->
    <br>
     <b>Date:</b> 2006-03-29<br>
     <b>Subject:</b> jumps into iteration statements</p>
    <b>Problem</b> 

    <p>Consider the code:</p>
<pre>
<tt><b>int x = 0;
    goto centre;
    while (++x &lt; 10)
    {
        //</b> <i>Some code</i> <b>centre:
        //</b> <i>More code</i> <b>}
</b></tt>
</pre>
    "Everyone knows" that, when the end of the block is reached,
    the loop test is evaluated in the normal way. Nevertheless, I
    can find nothing in the Standard that says so (it is implied by
    the example in 6.8.6.1#3, but that is all). Note that in: 
<pre>
<tt><b>int x;
    //</b> <i>...</i> <b>if (condition) { x = -1; goto true_case; }
    //</b> <i>...</i> <b>if (x &gt; 0)
      true_case:
        do_something ();
    else
        do_something_else ();
</b></tt>
</pre>
    the <tt><b>else</b></tt> case is not executed after a jump to
    <tt><b>true_case</b></tt>, even though the condition <tt><b>x
    &gt; 0</b></tt> is false. Therefore it is not possible to argue
    from analogy; note also that this latter case is spelled out in
    the Standard. Since this technique is well-known, it ought to
    be well-defined. 

    <p><b>Suggested Technical Corrigendum</b></p>

    <p>Add a new paragraph after 6.8.5#4:</p>

    <blockquote>
      <p>[#4a] If the loop body is reached by a jump from outside
      the iteration statement, the behavior is as if the body were
      entered in the normal way. That is, when the end of the body
      is reached the controlling expression is evaluated (and, in
      the case of a <tt><b>for</b></tt> statement, <i>expr-3</i> is
      evaluated first) and the body re-executed if it is not 0.
      Similarly, a <tt><b>break</b></tt> or
      <tt><b>continue</b></tt> statement has the appropriate
      effect. However, the code jumped over - including the
      controlling expressions in the case of a
      <tt><b>while</b></tt> or <tt><b>for</b></tt> statement - is
      not evaluated when the jump happens.</p>
    </blockquote>
    Possibly also add an example either as 6.8.5#6 or 6.8.6.1#5
    (with appropriate editorial changes): 

    <blockquote>
      [#6] EXAMPLE: A jump into a <tt><b>for</b></tt> statement
      does not execute <i>clause-1</i> at all or <i>expr-2</i>
      during the jump: 
<pre>
<tt><b>  int i = 5;
        if (condition) goto body;
        for (i = 0; i &lt; 10; i++)
        {
            if (i &gt; 2) i++;
        body:
            printf (" %d", i);
        }
        printf ("\n");
</b></tt>
</pre>
      If <tt><b>condition</b></tt> is true, this prints: 
<pre>
<tt><b>  5 7 9
</b></tt>
</pre>
      while if it is false it prints: 
<pre>
<tt><b>  0 1 2 4 6 8 10
</b></tt>
</pre>
    </blockquote>
    <hr>

    <p><b>Committee Discussion</b></p>

    <p>While we agree that this may be a defect, we are not happy
    with the proposed words, and processing this defect is
    postponed pending improved wording. Specifically, "as if the
    body were entered in the normal way" raises a few new
    questions.</p>

    <p><b>Technical Corrigendum</b></p>

    <p>Append to 6.8.5#4:</p>

    <blockquote>
      The repetition occurs regardless of whether the loop body is
      entered from the iteration statement or by a
      jump.<sup>*</sup> 

      <p><sup>*</sup> Code jumped over is not executed. In
      particular, the controlling expression of a
      <b><tt>for</tt></b> or <b><tt>while</tt></b> statement is not
      evaluated before entering the loop body, nor is
      <i>clause-1</i> of a <b><tt>for</tt></b> statement.</p>
    </blockquote>
    <br>
     

    <p><br>
     <a href="dr_267.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_269.htm">Next Defect Report</a></p>
  </body>
</html>

