<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">

<html>
  <head>
    <meta name="generator" content=
    "HTML Tidy for Windows (vers 1st August 2002), see www.w3.org">

    <title>Defect Report #222</title>
  </head>

  <body>
    <h2 align="center">Defect Report #222</h2>
    <a href="dr_221.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_223.htm">Previous Defect Report</a> 

    <p><br>
     <b>Submitter:</b> Clive Feather (UK)<br>
     <b>Submission Date:</b> 2000-04-04<br>
     <b>Source:</b><br>
     <b>Reference Document:</b> N/A<br>
     <b>Version:</b> 1.4<br>
     <b>Date:</b> 2001-09-18 16:03:01<br>
     <b>Subject:</b> Partially initialized structures</p>

    <p><b>Summary</b><br>
     Consider the code extract:</p>
<pre>
<tt><b>   struct listheader
     {
         struct item *head;
         struct item *tail;
     };
     //</b></tt> <i>The following is at block scope</i><tt><b>    struct listheader h1;
     h1.head = NULL;
     struct listheader h2;
     h2 = h1;</b></tt>
</pre>

    <p>The value of <tt><b>h1.tail</b></tt> is indeterminate
    throughout, but provided that the code never accesses it this
    is not a problem. However, if it holds a trap representation,
    the assignment to <tt><b>h2</b></tt> involves assigning a trap
    representation, which is undefined behaviour.</p>

    <p>There are two possible resolutions I can think of:</p>

    <ol>
      <li>Say that the code is defined. Any implementation that
      uses memberwise copying of structures now has to explicitly
      disable detection of trap values.</li>

      <li>Say that the code is undefined. This is going to surprise
      a number of people. In particular, it becomes impossible to
      assign any structure where the complete list of fields is
      unknown (e.g. any structure defined in a Standard
      header).</li>
    </ol>
    <hr>

    <p><b>Committee Discussion</b> (for history only)</p>

    <p>A TC should remove the notion of objects of struct or union
    type having a trap representation. Changes need to be made to
    6.2.6.1 paragraphs 6 and 7, and footnote 42. It was observed
    that the point of the original footnote was primarily to
    illustrate one reason why padding bits might not be copied:
    because member-by-member assignment might be performed. But
    member-by-member assignment would imply that struct assignment
    could produce undefined behavior if a member of the struct had
    a value that was a trap representation. Instead of adding
    further text explaining that member values that were trap
    representations were not permitted to render assignment of a
    containing struct or union object undefined (e.g. if
    member-by-member copying were used), it was decided that the
    footnote should simply clarify the issue of padding bits
    directly.<br>
    </p>
    <hr>

    <p><b>Technical Corrigendum</b><br>
     Change 6.2.6.1 paragraph #6 to:</p>

    <blockquote>
      When a value is stored in an object of structure or union
      type, including in a member object, the bytes of the object
      representation that correspond to any padding bytes take
      unspecified value.<sup>42)</sup> The value of a struct or
      union object is never a trap representation, even though the
      value of a member of a struct or union object may be a trap
      representation.
    </blockquote>
    Change footnote 42 to: 

    <blockquote>
      42) Thus, for example, structure assignment need not copy any
      padding bits.
    </blockquote>
    Change 6.2.6.1 paragraph #7 to: 

    <blockquote>
      When a value is stored in a member of an object of union
      type, the bytes of the object representation that do not
      correspond to that member but do correspond to other members
      take unspecified values.
    </blockquote>

    <p><br>
     <a href="dr_221.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_223.htm">Previous Defect Report</a></p>
  </body>
</html>

