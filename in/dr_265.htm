<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
  <head>
    <meta name="generator" content=
    "HTML Tidy for Windows (vers 1st August 2002), see www.w3.org">

    <title>Defect report #265</title>
  </head>

  <body bgcolor="#FFFFFF">
    <h2 align="center">Defect Report #265</h2>
    <a href="dr_264.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_266.htm">Next Defect Report</a> 

    <p><br>
     <b>Submitter:</b> UK C Panel<br>
     <b>Submission Date:</b> 2001-09-07<br>
     <b>Source:</b> Clive D.W. Feather &lt;clive@demon.net&gt;<br>
     <b>Version:</b> 1.2<br>
     <b>Date:</b> 2002-05-15<br>
     <b>Subject:</b> preprocessor arithmetic</p>
    <b>Problem</b> 

    <p>Assume that both compile-time and run-time arithmetic have
    2's complement, no trap representations, 8/16/32/48/64 bit
    integer types. Consider the code:</p>
<pre>
<tt><b>  #if -0xFFFFFFFF &lt; 0
</b></tt>
</pre>

    <p>Is this expression true or false ? 6.10.1#3 reads, in
    part:</p>

    <blockquote>
      <p>and then each preprocessing token is converted into a
      token. The resulting tokens compose the controlling constant
      expression which is evaluated according to the rules of 6.6,
      except that all signed integer types and all unsigned integer
      types act as if they have the same representation as,
      respectively, the types <tt><b>intmax_t</b></tt> and
      <tt><b>uintmax_t</b></tt> defined in the header
      <tt><b>&lt;stdint.h&gt;</b></tt>.</p>
    </blockquote>

    <p>Does the "except" wording apply to the conversion to a
    token, or only to the evaluation of the expression ? If the
    former, then 0xFFFFFFFF can be represented in an
    <tt><b>int</b></tt> (<tt><b>intmax_t</b></tt>), it has a signed
    type, and the expression is true. If the latter, 0xFFFFFFFF
    cannot be represented in an <tt><b>int</b></tt> but can be
    represented in an <tt><b>unsigned int</b></tt>, so it has
    unsigned type and the expression is false.</p>

    <p>I believe that the former was intended, with the
    preprocessor only having to consider one pair of integer
    types.</p>

    <p><b>Suggested Technical Corrigendum</b></p>

    <p>Change the cited text to:</p>

    <blockquote>
      <p>and then each preprocessing token is converted into a
      token. The resulting tokens compose the controlling constant
      expression which is evaluated according to the rules of 6.6.
      <b>For the purposes of the conversion and evaluation</b> all
      signed integer types and all unsigned integer types act as if
      they have the same representation as, respectively, the types
      <tt><b>intmax_t</b></tt> and <tt><b>uintmax_t</b></tt>
      defined in the header <tt><b>&lt;stdint.h&gt;</b></tt>.</p>
    </blockquote>

    <p>(bold type shows the changed words)</p>

    <p>Add a footnote reference to the end of this text, and add
    the footnote:</p>

    <blockquote>
      <p>140a Thus on an implementation where
      <tt><b>INT_MAX</b></tt> is 0x7FFF and
      <tt><b>UINT_MAX</b></tt> is 0xFFFF, the constant 0x8000 is
      signed within a <tt><b>#if</b></tt> expression even though it
      is unsigned in translation phase 7.</p>
    </blockquote>
    <hr>

    <p><b>Technical Corrigendum</b></p>

    <p>Change 6.10.1#3 to read:</p>

    <blockquote>
      ... 

      <p>and then each preprocessing token is converted into a
      token. The resulting tokens compose the controlling constant
      expression which is evaluated according to the rules of 6.6.
      For the purposes of this token conversion and evaluation all
      signed integer types and all unsigned integer types act as if
      they have the same representation as, respectively, the types
      <tt><b>intmax_t</b></tt> and <tt><b>uintmax_t</b></tt>
      defined in the header <tt><b>&lt;stdint.h&gt;</b></tt>.</p>
    </blockquote>

    <p>Add a footnote to the end of 6.10.1#3 to read:</p>

    <blockquote>
      Thus on an implementation where <tt><b>INT_MAX</b></tt> is
      0x7FFF and <tt><b>UINT_MAX</b></tt> is 0xFFFF, the constant
      0x8000 is signed and positive within a <tt><b>#if</b></tt>
      expression even though it is unsigned in translation phase 7.
    </blockquote>

    <p><br>
     <a href="dr_264.htm">Previous Defect Report</a> &lt; - &gt; <a
    href="dr_266.htm">Next Defect Report</a></p>
  </body>
</html>

